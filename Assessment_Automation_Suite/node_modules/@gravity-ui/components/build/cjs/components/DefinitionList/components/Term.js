"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Term = void 0;
const react_1 = __importDefault(require("react"));
const HelpPopover_1 = require("../../HelpPopover");
const i18n_1 = __importDefault(require("../i18n"));
const utils_1 = require("../utils");
function NoteElement({ note }) {
    if (!note) {
        return null;
    }
    const popoverClassName = (0, utils_1.b)('item-note-tooltip');
    if (typeof note === 'string') {
        return (react_1.default.createElement(HelpPopover_1.HelpPopover, { className: popoverClassName, content: note, placement: ['bottom', 'top'], buttonProps: {
                'aria-label': (0, i18n_1.default)('label_note'),
            } }));
    }
    if (typeof note === 'object') {
        const { buttonProps } = note, rest = __rest(note, ["buttonProps"]);
        return (react_1.default.createElement(HelpPopover_1.HelpPopover, Object.assign({ className: popoverClassName, placement: ['bottom', 'top'], buttonProps: Object.assign({ 'aria-label': (0, i18n_1.default)('label_note') }, buttonProps) }, rest)));
    }
    return null;
}
function Term({ note, name, nameTitle, multilineName, direction }) {
    const noteElement = (react_1.default.createElement(react_1.default.Fragment, null,
        "\u00A0",
        react_1.default.createElement(NoteElement, { note: note })));
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("div", { className: (0, utils_1.b)('term-wrapper') },
            react_1.default.createElement("span", { title: (0, utils_1.getTitle)(nameTitle, name) }, name),
            multilineName && noteElement),
        !multilineName && noteElement,
        direction === 'horizontal' && (react_1.default.createElement("div", { className: (0, utils_1.b)('dots', { 'with-note': Boolean(note) }) }))));
}
exports.Term = Term;

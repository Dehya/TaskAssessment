"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilePreview = void 0;
const react_1 = __importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../utils/cn");
const FilePreviewAction_1 = require("./FilePreviewAction");
const MobileImagePreview_1 = require("./MobileImagePreview/MobileImagePreview");
const utils_1 = require("./utils");
require("./FilePreview.css");
const cn = (0, cn_1.block)('file-preview');
const FILE_ICON = {
    default: icons_1.FileQuestion,
    image: icons_1.Picture,
    video: icons_1.Filmstrip,
    code: icons_1.Code,
    archive: icons_1.FileZipper,
    music: icons_1.MusicNote,
    text: icons_1.TextAlignLeft,
    pdf: icons_1.LogoAcrobat,
    table: icons_1.LayoutHeaderCellsLarge,
};
function FilePreview({ className, qa, file, imageSrc, description, onClick, actions, }) {
    const id = (0, uikit_1.useUniqId)();
    const [previewSrc, setPreviewSrc] = react_1.default.useState(imageSrc);
    const [showPreviewSheet, setShowPreviewSheet] = react_1.default.useState(false);
    const mobile = (0, uikit_1.useMobile)();
    const type = (0, utils_1.getFileType)(file);
    const { onKeyDown } = (0, uikit_1.useActionHandlers)(onClick);
    react_1.default.useEffect(() => {
        if (imageSrc)
            return undefined;
        try {
            const createdUrl = URL.createObjectURL(file);
            setPreviewSrc(createdUrl);
            return () => {
                URL.revokeObjectURL(createdUrl);
            };
        }
        catch (error) {
            return undefined;
        }
    }, [file, imageSrc]);
    const clickable = Boolean(onClick);
    const withActions = Boolean(actions === null || actions === void 0 ? void 0 : actions.length);
    const isPreviewString = typeof previewSrc === 'string';
    const hideActions = isPreviewString && mobile;
    const handleClick = (e) => {
        if (mobile && isPreviewString && !onClick) {
            setShowPreviewSheet(true);
        }
        else {
            onClick === null || onClick === void 0 ? void 0 : onClick(e);
        }
    };
    const handleSheetClose = () => {
        setShowPreviewSheet(false);
    };
    return (react_1.default.createElement("div", { className: cn(null, className), "data-qa": qa },
        react_1.default.createElement("div", { className: cn('card', { clickable, hoverable: clickable || withActions }), role: clickable ? 'button' : undefined, onKeyDown: clickable ? onKeyDown : undefined, tabIndex: clickable ? 0 : undefined, onClick: handleClick },
            isPreviewString ? (react_1.default.createElement("div", { className: cn('image') },
                react_1.default.createElement("img", { className: cn('image-img'), src: previewSrc, alt: file.name }))) : (react_1.default.createElement("div", { className: cn('icon', { type }) },
                react_1.default.createElement(uikit_1.Icon, { className: cn('icon-svg'), data: FILE_ICON[type], size: 20 }))),
            react_1.default.createElement(uikit_1.Text, { className: cn('name'), color: "secondary", ellipsis: true, title: file.name }, file.name),
            Boolean(description) && (react_1.default.createElement(uikit_1.Text, { className: cn('description'), color: "secondary", ellipsis: true, title: description }, description))),
        (actions === null || actions === void 0 ? void 0 : actions.length) ? (react_1.default.createElement("div", { className: cn('actions', { hide: hideActions }) }, actions.map((action, index) => (react_1.default.createElement(FilePreviewAction_1.FilePreviewAction, Object.assign({ key: `${id}-${index}`, id: `${id}-${index}` }, action)))))) : null,
        react_1.default.createElement(MobileImagePreview_1.MobileImagePreview, { visible: showPreviewSheet, onClose: handleSheetClose, actions: actions, previewSrc: previewSrc, fileName: file.name })));
}
exports.FilePreview = FilePreview;
FilePreview.displayName = 'FilePreview';

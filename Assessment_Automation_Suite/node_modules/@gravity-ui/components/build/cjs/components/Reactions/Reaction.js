"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reaction = void 0;
const react_1 = __importDefault(require("react"));
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../utils/cn");
const context_1 = require("./context");
const hooks_1 = require("./hooks");
const popupDefaultPlacement = [
    'bottom-start',
    'bottom',
    'bottom-end',
    'top-start',
    'top',
    'top-end',
];
const b = (0, cn_1.block)('reactions');
function Reaction(props) {
    const { value, selected, counter } = props.reaction;
    const { size, content, tooltip, onClick } = props;
    const onClickCallback = react_1.default.useCallback(() => onClick === null || onClick === void 0 ? void 0 : onClick(value), [onClick, value]);
    const buttonRef = react_1.default.useRef(null);
    const { onMouseEnter, onMouseLeave } = (0, hooks_1.useReactionsPopup)(props.reaction, buttonRef);
    const { openedTooltip: currentHoveredReaction } = (0, context_1.useReactionsContext)();
    const button = (react_1.default.createElement(uikit_1.Button, { className: b('reaction-button', { size }), ref: buttonRef, size: size, selected: selected, view: "outlined", extraProps: { value }, onClick: onClickCallback },
        react_1.default.createElement(uikit_1.Button.Icon, null,
            react_1.default.createElement("span", { className: b('reaction-button-content', { size }) }, content)),
        counter === undefined || counter === null ? null : (react_1.default.createElement("span", { className: b('reaction-button-content', { size, text: true }) }, counter))));
    return tooltip ? (react_1.default.createElement("div", { onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave },
        button,
        currentHoveredReaction && currentHoveredReaction.reaction.value === value ? (react_1.default.createElement(uikit_1.Popup, { contentClassName: b('popup'), anchorRef: currentHoveredReaction.ref, placement: popupDefaultPlacement, open: currentHoveredReaction.open, hasArrow: true }, tooltip)) : null)) : (button);
}
exports.Reaction = Reaction;

var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Definition } from './components/Definition';
import { GroupLabel } from './components/GroupLabel';
import { Term } from './components/Term';
import { b, getAllItemsAsGroups, getTitle, isUnbreakableOver, onlySingleItems } from './utils';
import './DefinitionList.css';
function DefinitionListGranular({ items, responsive, direction = 'horizontal', nameMaxWidth, contentMaxWidth = 'auto', className, itemClassName, copyPosition = 'outside', qa, }) {
    const keyStyle = nameMaxWidth ? { maxWidth: nameMaxWidth, width: nameMaxWidth } : {};
    const valueStyle = typeof contentMaxWidth === 'number'
        ? { width: contentMaxWidth, maxWidth: contentMaxWidth }
        : {};
    const normalizedItems = React.useMemo(() => {
        return items.map((value, index) => (Object.assign(Object.assign({}, value), { key: index })));
    }, [items]);
    return (React.createElement("div", { className: b({ responsive, vertical: direction === 'vertical' }, className), "data-qa": qa },
        React.createElement("dl", { className: b('list') }, normalizedItems.map((item) => {
            const { name, key, content, contentTitle, nameTitle, copyText, note, multilineName, } = item;
            return (React.createElement("div", { key: key, className: b('item', itemClassName) },
                React.createElement("dt", { className: b('term-container', { multiline: multilineName }), style: keyStyle },
                    React.createElement(Term, { direction: direction, name: name, nameTitle: nameTitle, note: note, multilineName: multilineName })),
                React.createElement("dd", { className: b('definition'), title: getTitle(contentTitle, content), style: Object.assign(Object.assign({}, valueStyle), { lineBreak: typeof content === 'string' &&
                            isUnbreakableOver(20)(content)
                            ? 'anywhere'
                            : undefined }) },
                    React.createElement(Definition, { copyPosition: copyPosition, copyText: copyText, content: content }))));
        }))));
}
function DefinitionListGrouped(_a) {
    var { items, className, itemClassName } = _a, rest = __rest(_a, ["items", "className", "itemClassName"]);
    const normalizedItems = React.useMemo(() => {
        return items.map((value, index) => (Object.assign(Object.assign({}, value), { key: index })));
    }, [items]);
    return (React.createElement("div", { className: b({ vertical: rest.direction === 'vertical' }, className) }, normalizedItems.map((item) => {
        const { key, label } = item;
        return (React.createElement(React.Fragment, { key: key },
            label && React.createElement(GroupLabel, { label: label }),
            item.items && (React.createElement(DefinitionListGranular, Object.assign({}, rest, { className: b({ margin: !label }), items: item.items, itemClassName: b('item', { grouped: Boolean(label) }, itemClassName) })))));
    })));
}
export function DefinitionList(_a) {
    var { items } = _a, rest = __rest(_a, ["items"]);
    if (onlySingleItems(items)) {
        return React.createElement(DefinitionListGranular, Object.assign({}, rest, { items: items }));
    }
    const preparedItems = getAllItemsAsGroups(items);
    return React.createElement(DefinitionListGrouped, Object.assign({}, rest, { items: preparedItems }));
}

import React from 'react';
import { Button, Popup } from '@gravity-ui/uikit';
import { block } from '../utils/cn';
import { useReactionsContext } from './context';
import { useReactionsPopup } from './hooks';
const popupDefaultPlacement = [
    'bottom-start',
    'bottom',
    'bottom-end',
    'top-start',
    'top',
    'top-end',
];
const b = block('reactions');
export function Reaction(props) {
    const { value, selected, counter } = props.reaction;
    const { size, content, tooltip, onClick } = props;
    const onClickCallback = React.useCallback(() => onClick === null || onClick === void 0 ? void 0 : onClick(value), [onClick, value]);
    const buttonRef = React.useRef(null);
    const { onMouseEnter, onMouseLeave } = useReactionsPopup(props.reaction, buttonRef);
    const { openedTooltip: currentHoveredReaction } = useReactionsContext();
    const button = (React.createElement(Button, { className: b('reaction-button', { size }), ref: buttonRef, size: size, selected: selected, view: "outlined", extraProps: { value }, onClick: onClickCallback },
        React.createElement(Button.Icon, null,
            React.createElement("span", { className: b('reaction-button-content', { size }) }, content)),
        counter === undefined || counter === null ? null : (React.createElement("span", { className: b('reaction-button-content', { size, text: true }) }, counter))));
    return tooltip ? (React.createElement("div", { onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave },
        button,
        currentHoveredReaction && currentHoveredReaction.reaction.value === value ? (React.createElement(Popup, { contentClassName: b('popup'), anchorRef: currentHoveredReaction.ref, placement: popupDefaultPlacement, open: currentHoveredReaction.open, hasArrow: true }, tooltip)) : null)) : (button);
}

import React from 'react';
import { FaceSmile } from '@gravity-ui/icons';
import { Button, Flex, Icon, Palette, Popover, } from '@gravity-ui/uikit';
import xor from 'lodash/xor';
import { block } from '../utils/cn';
import { Reaction } from './Reaction';
import { ReactionsContextProvider } from './context';
import { i18n } from './i18n';
import './Reactions.css';
const b = block('reactions');
const buttonSizeToIconSize = {
    xs: '12px',
    s: '16px',
    m: '16px',
    l: '16px',
    xl: '20px',
};
export function Reactions({ reactions, reactionsState, className, style, size = 'm', paletteProps, readOnly, qa, addButtonPlacement = 'end', renderTooltip, onToggle, }) {
    const [currentHoveredReaction, setCurrentHoveredReaction] = React.useState(undefined);
    const paletteOptionsMap = React.useMemo(() => reactions.reduce((acc, current) => {
        // eslint-disable-next-line no-param-reassign
        acc[current.value] = current;
        return acc;
    }, {}), [reactions]);
    const paletteValue = React.useMemo(() => reactionsState
        .filter((reaction) => reaction.selected)
        .map((reaction) => reaction.value), [reactionsState]);
    const onUpdatePalette = React.useCallback((updated) => {
        const diffValues = xor(paletteValue, updated);
        for (const diffValue of diffValues) {
            onToggle === null || onToggle === void 0 ? void 0 : onToggle(diffValue);
        }
    }, [onToggle, paletteValue]);
    const paletteContent = React.useMemo(() => (React.createElement(Palette, Object.assign({}, paletteProps, { options: reactions, value: paletteValue, size: size, onUpdate: onUpdatePalette }))), [paletteProps, reactions, paletteValue, size, onUpdatePalette]);
    const addReactionButton = readOnly ? null : (React.createElement(Popover, { content: paletteContent, tooltipContentClassName: b('add-reaction-popover'), openOnHover: false, hasArrow: false, focusTrap: true, autoFocus: true },
        React.createElement(Button, { className: b('reaction-button'), size: size, extraProps: { 'aria-label': i18n('add-reaction') }, view: "flat-secondary" },
            React.createElement(Button.Icon, null,
                React.createElement(Icon, { data: FaceSmile, size: buttonSizeToIconSize[size] })))));
    return (React.createElement(ReactionsContextProvider, { value: {
            openedTooltip: currentHoveredReaction,
            setOpenedTooltip: setCurrentHoveredReaction,
        } },
        React.createElement(Flex, { className: b(null, className), style: style, gap: 1, wrap: true, qa: qa },
            addButtonPlacement === 'start' ? addReactionButton : null,
            reactionsState.map((reaction) => {
                var _a, _b;
                const content = (_b = (_a = paletteOptionsMap[reaction.value]) === null || _a === void 0 ? void 0 : _a.content) !== null && _b !== void 0 ? _b : '?';
                return (React.createElement(Reaction, { key: reaction.value, content: content, reaction: reaction, size: size, tooltip: renderTooltip ? renderTooltip(reaction) : undefined, onClick: readOnly ? undefined : onToggle }));
            }),
            addButtonPlacement === 'end' ? addReactionButton : null)));
}

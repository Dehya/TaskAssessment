import React__default, { useState, useCallback, useMemo, useEffect } from 'react';
import { C as Content } from './Content-f94ba85d.js';
import { Drawer, DrawerItem } from './Drawer.js';
import { Icon, List, Sheet, Button, Text, eventBroker } from '@gravity-ui/uikit';
import { b as block, N as NAMESPACE } from './cn-ffe5e9f5.js';
import { s as styleInject } from './style-inject.es-1f59c1d0.js';
import { ArrowLeft } from '@gravity-ui/icons';
import { addComponentKeysets } from '@gravity-ui/uikit/i18n';

const useForwardRef = (ref, initialValue = null) => {
    const targetRef = React__default.useRef(initialValue);
    React__default.useEffect(() => {
        if (!ref)
            return;
        if (typeof ref === 'function') {
            ref(targetRef.current);
        }
        else {
            ref.current = targetRef.current;
        }
    }, [ref]);
    return targetRef;
};

var css_248z$6 = ".gn-mobile-logo{align-items:center;display:flex;gap:var(--g-spacing-2);overflow:hidden}.gn-mobile-logo:is(a),.gn-mobile-logo:is(a):active,.gn-mobile-logo:is(a):focus,.gn-mobile-logo:is(a):hover,.gn-mobile-logo:is(a):visited{color:var(--g-color-text-primary);outline:none;text-decoration:none}.gn-mobile-logo__icon{flex-shrink:0}.gn-mobile-logo__title{font-size:var(--g-text-header-1-font-size);font-weight:var(--g-text-header-font-weight);line-height:var(--g-text-header-1-line-height);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}";
styleInject(css_248z$6);

const b$6 = block('mobile-logo');
const MobileLogo = ({ text, compact, icon, iconSrc, iconClassName, iconSize = 32, textSize = 20, href = '/', target = '_self', wrapper, onClick, className, }) => {
    const hasWrapper = typeof wrapper === 'function';
    let logoIcon;
    if (iconSrc) {
        logoIcon = (React__default.createElement("img", { alt: "logo icon", src: iconSrc, width: iconSize, height: iconSize, className: iconClassName }));
    }
    else if (icon) {
        logoIcon = React__default.createElement(Icon, { data: icon, size: iconSize, className: b$6('icon', iconClassName) });
    }
    let logoTitle;
    if (typeof text === 'function') {
        logoTitle = text();
    }
    else {
        logoTitle = (React__default.createElement("span", { className: b$6('title'), style: { fontSize: textSize } }, text));
    }
    const logo = (React__default.createElement(React__default.Fragment, null,
        logoIcon,
        logoTitle));
    return hasWrapper ? (React__default.createElement("div", { className: b$6(null, className), onClick: onClick }, wrapper(logo, compact))) : (React__default.createElement("a", { href: href, target: target, ref: target === '_self' ? undefined : 'noreferrer', className: b$6(null, className), onClick: onClick }, logo));
};

var css_248z$5 = ".gn-mobile-header-burger{background:none;border:none;color:inherit;cursor:pointer;font-family:var(--g-text-body-font-family);font-size:inherit;font-weight:var(--g-text-body-font-weight);outline:none;padding:0}.gn-mobile-header-burger_opened .gn-mobile-header-burger__icon .gn-mobile-header-burger__icon-dash,.gn-mobile-header-burger_opened .gn-mobile-header-burger__icon:after,.gn-mobile-header-burger_opened .gn-mobile-header-burger__icon:before{left:3px}.gn-mobile-header-burger_opened .gn-mobile-header-burger__icon:before{transform:rotate(45deg)}.gn-mobile-header-burger_opened .gn-mobile-header-burger__icon:after{transform:rotate(-45deg)}.gn-mobile-header-burger_opened .gn-mobile-header-burger__icon .gn-mobile-header-burger__icon-dash{opacity:0}.gn-mobile-header-burger__icon{display:flex;height:var(--mobile-header-icon-size);place-content:center;position:relative;width:var(--mobile-header-icon-size)}.gn-mobile-header-burger__icon:after,.gn-mobile-header-burger__icon:before{content:\"\";transform-origin:left center;transition:transform .2s,left .2s}.gn-mobile-header-burger__icon:before{top:2px}.gn-mobile-header-burger__icon:after{bottom:2px}.gn-mobile-header-burger__icon .gn-mobile-header-burger__icon-dash,.gn-mobile-header-burger__icon:after,.gn-mobile-header-burger__icon:before{background-color:var(--g-color-text-primary);border-radius:1px;height:2px;left:0;position:absolute;width:100%}.gn-mobile-header-burger__icon .gn-mobile-header-burger__icon-dash{margin-top:-1px;top:50%;transition:opacity .2s}";
styleInject(css_248z$5);

const b$5 = block('mobile-header-burger');
const Burger = React__default.memo(({ closeTitle, openTitle, opened, className, onClick }) => (React__default.createElement("button", { className: b$5({ opened }, className), onClick: onClick, "aria-label": opened ? closeTitle : openTitle },
    React__default.createElement("span", { className: b$5('icon') },
        React__default.createElement("span", { className: b$5('icon-dash') })))));
Burger.displayName = 'Burger';

const MOBILE_ITEM_HEIGHT = 48;
const MOBILE_HEADER_COMPACT_HEIGHT = 50;
const MOBILE_HEADER_EXPANDED_HEIGHT = 120;
const MOBILE_HEADER_ICON_SIZE = 20;
const MOBILE_HEADER_EVENT_NAMES = {
    toggleEvent: 'MOBILE_PANEL_TOGGLE',
    closeEvent: 'MOBILE_PANEL_CLOSE',
    openEvent: 'MOBILE_PANEL_OPEN',
};
const BURGER_PANEL_ITEM_ID = 'burger';
const OVERLAP_PANEL_ITEM_ID = 'overlap';

const getItemHeight = (item) => {
    switch (item.type) {
        case 'divider':
            return 1;
        default:
            return MOBILE_ITEM_HEIGHT;
    }
};
const getSelectedItemIndex = (items) => {
    const index = items.findIndex(({ current }) => Boolean(current));
    return index === -1 ? undefined : index;
};
const getMobileHeaderCustomEvent = (eventName, detail) => {
    return new CustomEvent(eventName, { detail });
};

var css_248z$4 = ".gn-burger-composite-bar{overflow-y:auto}.gn-burger-composite-bar__item{align-items:center;box-sizing:border-box;display:flex;flex-grow:1;height:100%;overflow:hidden;padding:4px 22px 4px 12px}.gn-burger-composite-bar__item-icon-place{align-items:center;display:flex;flex-shrink:0;justify-content:center;margin-right:8px;width:40px}.gn-burger-composite-bar .gn-burger-composite-bar__item-icon{color:var(--g-color-text-misc)}.gn-burger-composite-bar__item-title{font-size:var(--g-text-body-2-font-size);font-weight:var(--g-text-body-font-weight);line-height:var(--g-text-body-2-line-height);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.gn-burger-composite-bar__link{align-items:center;display:flex;flex-grow:1;height:100%}.gn-burger-composite-bar__link,.gn-burger-composite-bar__link:active,.gn-burger-composite-bar__link:focus,.gn-burger-composite-bar__link:hover,.gn-burger-composite-bar__link:visited{color:inherit;outline:none;text-decoration:none}.gn-burger-composite-bar__menu-divider{border-top:1px solid var(--g-color-line-generic);flex-grow:1;margin:0}.gn-burger-composite-bar__root-menu-item.g-list__item_selected{background-color:var(--g-color-base-selection)}.gn-burger-composite-bar__root-menu-item:not(.g-list__item_selected).g-list__item_active{background:none}";
styleInject(css_248z$4);

const b$4 = block('burger-composite-bar');
const Item = ({ item, onItemClick }) => {
    const { icon, type = 'regular', iconSize = MOBILE_HEADER_ICON_SIZE } = item;
    if (type === 'divider') {
        return React__default.createElement("div", { className: b$4('menu-divider') });
    }
    const node = (React__default.createElement("div", { className: b$4('item', { type }), onClick: () => {
            if (typeof item.onItemClick === 'function') {
                item.onItemClick(item);
            }
            if (type === 'regular') {
                onItemClick === null || onItemClick === void 0 ? void 0 : onItemClick(item);
            }
        } },
        React__default.createElement("div", { className: b$4('item-icon-place') }, icon && React__default.createElement(Icon, { data: icon, size: iconSize, className: b$4('item-icon') })),
        React__default.createElement("div", { className: b$4('item-title') }, item.title)));
    if (typeof item.itemWrapper === 'function') {
        return item.itemWrapper(node, item);
    }
    return item.link ? (React__default.createElement("a", { href: item.link, className: b$4('link') }, node)) : (node);
};
Item.displayName = 'Item';
const BurgerCompositeBar = React__default.memo(({ items, onItemClick }) => {
    return (React__default.createElement("nav", { className: b$4() },
        React__default.createElement(List, { items: items, selectedItemIndex: getSelectedItemIndex(items), itemHeight: getItemHeight, itemClassName: b$4('root-menu-item'), virtualized: false, filterable: false, sortable: false, renderItem: (item) => React__default.createElement(Item, { item: item, onItemClick: onItemClick }) })));
});
BurgerCompositeBar.displayName = 'BurgerCompositeBar';

var css_248z$3 = ".gn-mobile-header-burger-menu{display:flex;flex-direction:column;height:100%}.gn-mobile-header-burger-menu__footer{border-top:1px solid var(--g-color-base-generic);display:flex;margin-top:auto}";
styleInject(css_248z$3);

const b$3 = block('mobile-header-burger-menu');
const BurgerMenu = React__default.memo(({ items = [], renderFooter, modalItem, className, onItemClick }) => {
    var _a;
    return (React__default.createElement("div", { className: b$3(null, className) },
        modalItem && (React__default.createElement(Sheet, { visible: modalItem.visible, id: modalItem.id, title: modalItem.title, onClose: modalItem.onClose, contentClassName: modalItem.contentClassName, className: modalItem.className }, (_a = modalItem.renderContent) === null || _a === void 0 ? void 0 : _a.call(modalItem))),
        React__default.createElement(BurgerCompositeBar, { items: items, onItemClick: onItemClick }),
        renderFooter && React__default.createElement("div", { className: b$3('footer') }, renderFooter === null || renderFooter === void 0 ? void 0 : renderFooter())));
});
BurgerMenu.displayName = 'BurgerMenu';

var burger_button_close$1 = "Close menu";
var burger_button_open$1 = "Open menu";
var overlap_button_close$1 = "Close";
var en = {
	burger_button_close: burger_button_close$1,
	burger_button_open: burger_button_open$1,
	overlap_button_close: overlap_button_close$1
};

var burger_button_close = "Закрыть меню";
var burger_button_open = "Открыть меню";
var overlap_button_close = "Закрыть";
var ru = {
	burger_button_close: burger_button_close,
	burger_button_open: burger_button_open,
	overlap_button_close: overlap_button_close
};

const COMPONENT = 'MobileHeader';
var i18n = addComponentKeysets({ en, ru }, `${NAMESPACE}${COMPONENT}`);

var css_248z$2 = ".gn-mobile-overlap-panel{inset:0;position:fixed}.gn-mobile-overlap-panel__drawer-item{box-sizing:border-box;display:flex;flex-direction:column;height:100%;max-height:100%;max-width:100%;width:100%}.gn-mobile-overlap-panel_action .gn-mobile-overlap-panel__title{padding-right:0}.gn-mobile-overlap-panel__close{margin-right:var(--g-spacing-1)}.gn-mobile-overlap-panel__action{margin-left:var(--g-spacing-1)}.gn-mobile-overlap-panel__action.g-button:hover:before,.gn-mobile-overlap-panel__close.g-button:hover:before{background-color:transparent}.gn-mobile-overlap-panel__title{display:inline-block;flex:1;justify-content:center;margin:0;padding-right:40px;text-align:center}.gn-mobile-overlap-panel__content{box-sizing:border-box;display:flex;flex-direction:column;height:100%;overflow-y:auto;padding:0 var(--g-spacing-5)}.gn-mobile-overlap-panel__header{align-items:center;display:flex;justify-content:space-between;margin-bottom:var(--g-spacing-3);padding:var(--g-spacing-1) var(--g-spacing-3)}";
styleInject(css_248z$2);

const b$2 = block('mobile-overlap-panel');
const OverlapPanel = ({ title, renderContent, className, onClose, action, closeTitle = i18n('overlap_button_close'), visible, topOffset, }) => {
    return (React__default.createElement(Drawer, { className: b$2('', { action: Boolean(action) }, className), onVeilClick: onClose, onEscape: onClose, preventScrollBody: true, style: {
            top: topOffset,
        } },
        React__default.createElement(DrawerItem, { id: "overlap", visible: visible, className: b$2('drawer-item') },
            React__default.createElement("div", { className: b$2('header') },
                React__default.createElement(Button, { size: "l", view: "flat", className: b$2('close'), onClick: onClose, extraProps: {
                        'aria-label': closeTitle,
                    } },
                    React__default.createElement(Icon, { className: b$2('icon'), data: ArrowLeft, size: MOBILE_HEADER_ICON_SIZE })),
                React__default.createElement(Text, { whiteSpace: "nowrap", ellipsis: true, variant: 'subheader-2', className: b$2('title'), as: title ? 'h2' : undefined }, title),
                action && (React__default.createElement(Button, { size: "l", type: "button", view: "flat", onClick: action.onClick, className: b$2('action'), extraProps: {
                        'aria-label': action.title,
                    } },
                    React__default.createElement(Icon, { data: action.icon, size: MOBILE_HEADER_ICON_SIZE })))),
            React__default.createElement("div", { className: b$2('content') }, renderContent()))));
};

var css_248z$1 = ".gn-mobile-header{--mobile-header-min-heigth:50px;--mobile-header-icon-size:20px}.gn-mobile-header,.gn-mobile-header__header{background-color:var(--g-color-base-background)}.gn-mobile-header__header{align-items:center;border-bottom:1px solid var(--g-color-line-generic);box-sizing:border-box;display:flex;justify-content:space-between;padding:0 10px;position:sticky;top:0;z-index:var(--gn-mobile-header-z-index,100)}.gn-mobile-header__burger{padding:12px}.gn-mobile-header__burger-menu,.gn-mobile-header__panel-item{background-color:var(--g-color-base-background);max-height:100%;max-width:90vw;width:320px}.gn-mobile-header__user-menu{overflow-y:auto}.gn-mobile-header__overlap-panel,.gn-mobile-header__panels{z-index:var(--gn-mobile-header-panel-z-index,98)}.gn-mobile-header__panels{inset:var(--mobile-header-min-heigth) 0 0;overflow:hidden;position:fixed}.gn-mobile-header__content{overflow:auto}";
styleInject(css_248z$1);

const b$1 = block('mobile-header');
const MobileHeader = React__default.forwardRef(({ logo, burgerMenu, burgerCloseTitle = i18n('burger_button_close'), burgerOpenTitle = i18n('burger_button_open'), panelItems = [], renderContent, sideItemRenderContent, onClosePanel, onEvent, className, contentClassName, overlapPanel, }, ref) => {
    const targetRef = useForwardRef(ref);
    const [compact] = useState(true);
    const [visiblePanel, setVisiblePanel] = useState(null);
    const [overlapPanelVisible, setOverlapPanelVisible] = useState(false);
    // for expand top panel cases (i.e. switch service panel). Will be removed if not used in future design
    const size = compact ? MOBILE_HEADER_COMPACT_HEIGHT : MOBILE_HEADER_EXPANDED_HEIGHT;
    const onPanelToggle = useCallback((name) => {
        if (!name)
            return;
        setVisiblePanel((prev) => {
            const panelOpen = prev === name;
            onEvent === null || onEvent === void 0 ? void 0 : onEvent(name, panelOpen
                ? MOBILE_HEADER_EVENT_NAMES.closeEvent
                : MOBILE_HEADER_EVENT_NAMES.openEvent);
            return panelOpen ? null : name;
        });
        setOverlapPanelVisible(false);
    }, [onEvent]);
    const onMobilePanelToggle = useCallback(({ detail }) => {
        if (typeof (detail === null || detail === void 0 ? void 0 : detail.panelName) === 'string') {
            onPanelToggle(detail === null || detail === void 0 ? void 0 : detail.panelName);
        }
    }, [onPanelToggle]);
    const onMobilePanelOpen = useCallback(({ detail }) => {
        if (typeof (detail === null || detail === void 0 ? void 0 : detail.panelName) === 'string') {
            onEvent === null || onEvent === void 0 ? void 0 : onEvent(detail === null || detail === void 0 ? void 0 : detail.panelName, MOBILE_HEADER_EVENT_NAMES.openEvent);
            setVisiblePanel(detail === null || detail === void 0 ? void 0 : detail.panelName);
            setOverlapPanelVisible(false);
        }
    }, [onEvent]);
    const onMobilePanelClose = useCallback(({ detail }) => {
        if (typeof (detail === null || detail === void 0 ? void 0 : detail.panelName) === 'string') {
            onEvent === null || onEvent === void 0 ? void 0 : onEvent(detail === null || detail === void 0 ? void 0 : detail.panelName, MOBILE_HEADER_EVENT_NAMES.closeEvent);
            setVisiblePanel(null);
            setOverlapPanelVisible(false);
        }
    }, [onEvent]);
    const onBurgerOpen = useCallback(() => {
        onEvent === null || onEvent === void 0 ? void 0 : onEvent(BURGER_PANEL_ITEM_ID, MOBILE_HEADER_EVENT_NAMES.openEvent);
        setVisiblePanel(BURGER_PANEL_ITEM_ID);
    }, [onEvent]);
    const onBurgerClose = useCallback(() => {
        onEvent === null || onEvent === void 0 ? void 0 : onEvent(BURGER_PANEL_ITEM_ID, MOBILE_HEADER_EVENT_NAMES.closeEvent);
        setVisiblePanel(null);
    }, [onEvent]);
    const onOverlapOpen = useCallback(() => {
        onEvent === null || onEvent === void 0 ? void 0 : onEvent(OVERLAP_PANEL_ITEM_ID, MOBILE_HEADER_EVENT_NAMES.openEvent);
        setOverlapPanelVisible(true);
    }, [onEvent]);
    const onOverlapClose = useCallback(() => {
        onEvent === null || onEvent === void 0 ? void 0 : onEvent(OVERLAP_PANEL_ITEM_ID, MOBILE_HEADER_EVENT_NAMES.closeEvent);
        setOverlapPanelVisible(false);
    }, [onEvent]);
    const onCloseDrawer = useCallback(() => {
        if (visiblePanel) {
            onEvent === null || onEvent === void 0 ? void 0 : onEvent(visiblePanel, MOBILE_HEADER_EVENT_NAMES.closeEvent);
        }
        setVisiblePanel(null);
    }, [visiblePanel, onEvent]);
    const onBurgerMenuItemClick = useCallback((item) => {
        var _a;
        const closeMenuOnClick = (_a = item.closeMenuOnClick) !== null && _a !== void 0 ? _a : true;
        if (closeMenuOnClick) {
            onBurgerClose();
        }
    }, [onBurgerClose]);
    const renderBurgerMenuFooter = useCallback(() => {
        var _a;
        return (_a = burgerMenu.renderFooter) === null || _a === void 0 ? void 0 : _a.call(burgerMenu, {
            size,
            isCompact: compact,
        });
    }, [burgerMenu, size, compact]);
    const onLogoClick = useCallback((event) => {
        var _a;
        onClosePanel === null || onClosePanel === void 0 ? void 0 : onClosePanel();
        (_a = logo.onClick) === null || _a === void 0 ? void 0 : _a.call(logo, event);
    }, [logo, onClosePanel]);
    const burgerPanelItem = useMemo(() => ({
        id: BURGER_PANEL_ITEM_ID,
        content: (React__default.createElement(BurgerMenu, { items: burgerMenu.items, modalItem: burgerMenu.modalItem, renderFooter: renderBurgerMenuFooter, onItemClick: onBurgerMenuItemClick, className: b$1('burger-menu') })),
    }), [burgerMenu.items, burgerMenu.modalItem, onBurgerMenuItemClick, renderBurgerMenuFooter]);
    useEffect(() => {
        const node = targetRef === null || targetRef === void 0 ? void 0 : targetRef.current;
        if (node) {
            node.addEventListener('MOBILE_BURGER_OPEN', onBurgerOpen);
            node.addEventListener('MOBILE_BURGER_CLOSE', onBurgerClose);
            node.addEventListener('MOBILE_OVERLAP_PANEL_OPEN', onOverlapOpen);
            node.addEventListener('MOBILE_OVERLAP_PANEL_CLOSE', onOverlapClose);
            node.addEventListener('MOBILE_PANEL_TOGGLE', onMobilePanelToggle);
            node.addEventListener('MOBILE_PANEL_OPEN', onMobilePanelOpen);
            node.addEventListener('MOBILE_PANEL_CLOSE', onMobilePanelClose);
        }
        return () => {
            if (node) {
                node.removeEventListener('MOBILE_BURGER_OPEN', onBurgerOpen);
                node.removeEventListener('MOBILE_BURGER_CLOSE', onBurgerClose);
                node.removeEventListener('MOBILE_OVERLAP_PANEL_OPEN', onOverlapOpen);
                node.removeEventListener('MOBILE_OVERLAP_PANEL_CLOSE', onOverlapClose);
                node.removeEventListener('MOBILE_PANEL_TOGGLE', onMobilePanelToggle);
                node.removeEventListener('MOBILE_PANEL_OPEN', onMobilePanelOpen);
                node.removeEventListener('MOBILE_PANEL_CLOSE', onMobilePanelClose);
            }
        };
    }, [
        targetRef,
        onBurgerClose,
        onBurgerOpen,
        onMobilePanelToggle,
        onMobilePanelOpen,
        onMobilePanelClose,
        onOverlapOpen,
        onOverlapClose,
    ]);
    return (React__default.createElement("div", { className: b$1({ compact }, className), ref: targetRef },
        React__default.createElement("header", { className: b$1('header'), style: { height: size } },
            React__default.createElement(Burger, { opened: visiblePanel === burgerPanelItem.id, onClick: () => onPanelToggle(BURGER_PANEL_ITEM_ID), className: b$1('burger'), closeTitle: burgerCloseTitle, openTitle: burgerOpenTitle }),
            React__default.createElement(MobileLogo, Object.assign({}, logo, { compact: compact, onClick: onLogoClick })),
            React__default.createElement("div", { className: b$1('side-item') }, sideItemRenderContent === null || sideItemRenderContent === void 0 ? void 0 : sideItemRenderContent({ size }))),
        React__default.createElement(Drawer, { className: b$1('panels'), onVeilClick: onCloseDrawer, onEscape: onCloseDrawer, style: { top: size } }, [burgerPanelItem, ...panelItems].map((item) => (React__default.createElement(DrawerItem, Object.assign({}, item, { key: item.id, visible: visiblePanel === item.id, className: b$1('panel-item', item.className) }))))),
        overlapPanel && (React__default.createElement(OverlapPanel, { topOffset: size, className: b$1('overlap-panel'), title: overlapPanel.title, onClose: onOverlapClose, action: overlapPanel.action, visible: overlapPanelVisible, renderContent: overlapPanel.renderContent })),
        React__default.createElement(Content, { size: size, renderContent: renderContent, className: b$1('content', contentClassName), cssSizeVariableName: "--mobile-header-size" })));
});
MobileHeader.displayName = 'MobileHeader';

var css_248z = ".gn-mobile-header-footer-item{flex-grow:1;position:relative}.gn-mobile-header-footer-item__button{align-items:center;background:none;border:none;box-sizing:border-box;color:inherit;cursor:pointer;display:flex;font-family:var(--g-text-body-font-family);font-size:inherit;font-weight:var(--g-text-body-font-weight);justify-content:center;outline:none;padding:13px 10px;width:100%}.gn-mobile-header-footer-item .gn-mobile-header-footer-item__icon{color:var(--g-color-text-misc)}.gn-mobile-header-footer-item+.gn-mobile-header-footer-item:before{border-left:1px solid var(--g-color-base-generic);bottom:8px;content:\"\";left:0;position:absolute;top:8px}.gn-mobile-header-footer-item:empty{display:none}";
styleInject(css_248z);

const b = block('mobile-header-footer-item');
const FooterItem = ({ icon, iconSize = MOBILE_HEADER_ICON_SIZE, className, modalItem = { visible: false }, onClick, eventBrokerMeta, }) => {
    var _a;
    const handleClick = React__default.useCallback((event) => {
        eventBroker.publish({
            componentId: 'MobileHeaderFooterItem',
            eventId: 'click',
            domEvent: event,
            meta: eventBrokerMeta,
        });
        onClick === null || onClick === void 0 ? void 0 : onClick(event);
    }, [onClick, eventBrokerMeta]);
    return (React__default.createElement("div", { className: b() },
        React__default.createElement("button", { className: b('button', className), onClick: handleClick }, icon ? React__default.createElement(Icon, { data: icon, size: iconSize, className: b('icon') }) : null),
        React__default.createElement(Sheet, { id: modalItem.id, title: modalItem.title, visible: modalItem.visible, className: b('modal', modalItem.className), contentClassName: b('modal-content', modalItem.contentClassName), allowHideOnContentScroll: modalItem.modalAllowHideOnContentScroll, onClose: modalItem.onClose }, (_a = modalItem.renderContent) === null || _a === void 0 ? void 0 : _a.call(modalItem))));
};

export { FooterItem as F, MOBILE_HEADER_EVENT_NAMES as M, MobileHeader as a, MobileLogo as b, getMobileHeaderCustomEvent as g };
//# sourceMappingURL=FooterItem-42f3ac69.js.map

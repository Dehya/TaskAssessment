import { _ as __rest } from './tslib.es6-3cd4e99f.js';
import React__default, { useState, useMemo, useCallback } from 'react';
import { Hotkey, TextInput, List } from '@gravity-ui/uikit';
import { Drawer, DrawerItem } from './Drawer.js';
import { b as block } from './cn-ffe5e9f5.js';
import { s as styleInject } from './style-inject.es-1f59c1d0.js';

function filterHotkeys(hotkeys, filter) {
    if (filter) {
        const result = [];
        const normalizedFilter = filter.toLowerCase();
        for (const hotkeysBlock of hotkeys) {
            const filteredItems = hotkeysBlock.items.filter((item) => item.title.toLowerCase().includes(normalizedFilter));
            if (filteredItems.length > 0) {
                result.push(Object.assign(Object.assign({}, hotkeysBlock), { items: filteredItems }));
            }
        }
        return result;
    }
    return hotkeys;
}

function flattenHotkeyGroups(hotkeys) {
    const result = [];
    for (const hotkeysGroup of hotkeys) {
        result.push({
            title: hotkeysGroup.title,
            group: true,
        });
        result.push(...hotkeysGroup.items);
    }
    return result;
}

var css_248z = ".gn-hotkeys-panel{--hotkeys-panel-width:400px;--hotkeys-panel-vertical-padding:18px;--hotkeys-panel-horizontal-padding:24px;inset:0;position:fixed}.gn-hotkeys-panel__drawer-item{box-sizing:border-box;display:flex;flex-direction:column;padding:var(--hotkeys-panel-vertical-padding) 0;width:var(--hotkeys-panel-width)}.gn-hotkeys-panel__title{margin:0 var(--hotkeys-panel-horizontal-padding) 16px var(--hotkeys-panel-horizontal-padding)}.gn-hotkeys-panel__search{box-sizing:border-box;margin-bottom:14px;padding:0 var(--hotkeys-panel-horizontal-padding)}.gn-hotkeys-panel__list{flex:1;overflow-y:auto}.gn-hotkeys-panel__item{height:auto;padding:8px var(--hotkeys-panel-horizontal-padding)}.gn-hotkeys-panel__item.g-list__item_active{background:inherit}.gn-hotkeys-panel__item-content{align-items:baseline;color:var(--g-color-text-primary);display:flex;font-size:var(--g-text-body-1-font-size);justify-content:space-between;line-height:var(--g-text-body-1-line-height);width:100%}.gn-hotkeys-panel__item-content_group{font-size:var(--g-text-body-2-font-size);font-weight:500;line-height:var(--g-text-body-2-line-height)}.gn-hotkeys-panel__hotkey{color:var(--g-color-text-complementary)}";
styleInject(css_248z);

const b = block('hotkeys-panel');
function HotkeysPanel(_a) {
    var { visible, onClose, leftOffset, topOffset, className, drawerItemClassName, filterClassName, titleClassName, listClassName, itemContentClassName, preventScrollBody, hotkeys, itemClassName, filterable = true, filterPlaceholder, title, emptyState } = _a, listProps = __rest(_a, ["visible", "onClose", "leftOffset", "topOffset", "className", "drawerItemClassName", "filterClassName", "titleClassName", "listClassName", "itemContentClassName", "preventScrollBody", "hotkeys", "itemClassName", "filterable", "filterPlaceholder", "title", "emptyState"]);
    const [filter, setFilter] = useState('');
    const hotkeysList = useMemo(() => {
        const filteredHotkeys = filterHotkeys(hotkeys, filter);
        return flattenHotkeyGroups(filteredHotkeys);
    }, [hotkeys, filter]);
    const renderItem = useCallback((item) => (React__default.createElement("div", { className: b('item-content', { group: item.group }, itemContentClassName), key: item.title },
        item.title,
        item.value && React__default.createElement(Hotkey, { className: b('hotkey'), value: item.value }))), []);
    const drawerItemContent = (React__default.createElement(React__default.Fragment, null,
        React__default.createElement("h2", { className: b('title', titleClassName) }, title),
        filterable && (React__default.createElement(TextInput, { value: filter, onUpdate: setFilter, placeholder: filterPlaceholder, autoFocus: true, className: b('search', filterClassName), hasClear: true })),
        React__default.createElement(List, Object.assign({ className: b('list', listClassName), virtualized: false, filterable: false, items: hotkeysList, renderItem: renderItem, itemClassName: b('item', itemClassName), emptyPlaceholder: emptyState }, listProps))));
    return (React__default.createElement(Drawer, { className: b(null, className), onVeilClick: onClose, onEscape: onClose, preventScrollBody: preventScrollBody, style: {
            left: leftOffset,
            top: topOffset,
        } },
        React__default.createElement(DrawerItem, { id: "hotkeys", visible: visible, className: b('drawer-item', drawerItemClassName), content: drawerItemContent })));
}

export { HotkeysPanel as H };
//# sourceMappingURL=HotkeysPanel-f0e2a06c.js.map

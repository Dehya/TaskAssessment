import React__default from 'react';
import { Alert } from '@gravity-ui/uikit';
import { d as debounce_1 } from './debounce-64cd2b4c.js';
import { b } from './utils-117463a5.js';
import './cn-ffe5e9f5.js';
import '@bem-react/classname';

const G_ROOT_CLASS_NAME = 'g-root';
const useRefHeight = (ref) => {
    const [topHeight, setTopHeight] = React__default.useState(0);
    React__default.useEffect(() => {
        if (ref.current) {
            const { current } = ref;
            setTopHeight(current.clientHeight);
        }
    }, [ref]);
    return topHeight;
};
const useAsideHeaderTopPanel = ({ topAlert, }) => {
    const topRef = React__default.useRef(null);
    const topHeight = useRefHeight(topRef);
    const setAsideTopPanelHeight = React__default.useCallback((clientHeight) => {
        const gRootElement = document
            .getElementsByClassName(G_ROOT_CLASS_NAME)
            .item(0);
        gRootElement === null || gRootElement === void 0 ? void 0 : gRootElement.style.setProperty('--gn-aside-top-panel-height', clientHeight + 'px');
    }, []);
    const updateTopSize = React__default.useCallback(() => {
        var _a;
        if (topRef.current) {
            setAsideTopPanelHeight(((_a = topRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) || 0);
        }
    }, [topRef, setAsideTopPanelHeight]);
    React__default.useLayoutEffect(() => {
        const updateTopSizeDebounce = debounce_1(updateTopSize, 200, { leading: true });
        if (topAlert) {
            window.addEventListener('resize', updateTopSizeDebounce);
            updateTopSizeDebounce();
        }
        return () => {
            window.removeEventListener('resize', updateTopSizeDebounce);
            setAsideTopPanelHeight(0);
        };
    }, [topAlert, topHeight, topRef, updateTopSize, setAsideTopPanelHeight]);
    return {
        topRef,
        updateTopSize,
    };
};

const TopPanel = ({ topAlert }) => {
    const { topRef, updateTopSize } = useAsideHeaderTopPanel({ topAlert });
    const [opened, setOpened] = React__default.useState(true);
    const handleClose = React__default.useCallback(() => {
        var _a;
        setOpened(false);
        (_a = topAlert === null || topAlert === void 0 ? void 0 : topAlert.onCloseTopAlert) === null || _a === void 0 ? void 0 : _a.call(topAlert);
    }, [topAlert]);
    React__default.useEffect(() => {
        if (!opened) {
            updateTopSize();
        }
    }, [opened, updateTopSize]);
    if (!topAlert || !topAlert.message) {
        return null;
    }
    return (React__default.createElement("div", { ref: topRef, className: b('pane-top', { opened }) }, opened && (React__default.createElement(React__default.Fragment, null,
        React__default.createElement(Alert, { className: b('pane-top-alert', {
                centered: topAlert.centered,
                dense: topAlert.dense,
            }), corners: "square", layout: "horizontal", theme: topAlert.theme || 'warning', view: topAlert.view, icon: topAlert.icon, title: topAlert.title, message: topAlert.message, actions: topAlert.actions, onClose: topAlert.closable ? handleClose : undefined }),
        React__default.createElement("div", { className: b('pane-top-divider') })))));
};

export { TopPanel };
//# sourceMappingURL=TopPanel-627d614f.js.map
